(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{572:function(_,v,e){"use strict";e.r(v);var o=e(55),t=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"js-实现大数相加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-实现大数相加"}},[_._v("#")]),_._v(" JS 实现大数相加")]),_._v(" "),e("p",[_._v("我们知道，在任何一门编程语言里，单纯的数字是有一个上限（下限）范围的。比如在我们的JS中，数字的最大值为"),e("code",[_._v("Number.MAX_VALUE")]),_._v("，即等于"),e("code",[_._v("1.7976931348623157e+308")]),_._v("。超过这个上限的操作，都会导致结果的不准确。可是如果非要计算两个超大的数字之和，是不是就没有办法了呢？")]),_._v(" "),e("p",[_._v("先来复习一下加法，比如我们要求"),e("code",[_._v("12")]),_._v("和"),e("code",[_._v("9")]),_._v("之和，我们会先加"),e("code",[_._v("2")]),_._v("和"),e("code",[_._v("9")]),_._v("，得到"),e("code",[_._v("11")]),_._v("，因为"),e("code",[_._v("11>10")]),_._v("，所以个位等于"),e("code",[_._v("1")]),_._v("，"),e("strong",[_._v("往前进一位")]),_._v("，此时我们的十位就是"),e("code",[_._v("1+1")]),_._v("等于"),e("code",[_._v("2")]),_._v("了，所以最终的结果等于"),e("code",[_._v("十位")]),_._v("加上（不是数值的加，是字符串形式的拼接）"),e("code",[_._v("个位")]),_._v("，即"),e("code",[_._v("21")]),_._v("。其实我们的大数相加的原理也是相同，再大的数也得乖乖的从个位开始加，所以，套用这个原理，我们可以很轻松的实现大数相加。")])])}),[],!1,null,null,null);v.default=t.exports}}]);